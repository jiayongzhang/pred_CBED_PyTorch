#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""pred_CBED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1so8i-5nk4xpYEuXOXbHDgkIfe8b1LLav

Referred to Pytorch ZetoToAll

TODO:
"""

import numpy as np
from matplotlib import pyplot as plt
import h5py
import torch
import torchvision
import torch.optim as optim
import torch.nn.functional as F
import torchvision.transforms as transforms
from torch.autograd import Variable
from torch.utils.data import Dataset, DataLoader

# Ignore warnings
import warnings
warnings.filterwarnings("ignore")


class CBEDDataset(Dataset):
    """ CBED dataset."""

    def __init__(self, data_file):
        f = h5py.File(data_file, mode='r', swmr=True)
        keys = list(f.keys())
        self._len = len(keys)
        tmp_x, tmp_y = [], []
        for i in range(self._len):
            tmp_x.append(dict(f[keys[i]].items())['cbed_stack'][()])
            #tmp_y.append(dict(f[keys[i]].items())['cbed_stack'][()][1])
            #tmp_z.append(dict(f[keys[i]].items())['cbed_stack'][()][2])
            tmp_y.append(int(dict(f[keys[i]].attrs.items())['space_group']))
        #numpy is faster than torch.tensor
        self.x_data = torch.from_numpy(np.array(tmp_x))
        if self.transform is not None:
            x = self.transform(x)

        #self.x_data = torch.tensor(tmp_x)
        #self.y_data = torch.tensor(tmp_y)
        self.y_data = torch.from_numpy(np.array(tmp_y))

    def __getitem__(self, index):
        return self.x_data[index], self.y_data[index]

    def __len__(self):
        return self._len

data_transform = transforms.Compose([
    #transforms.Resize(1),
    #transforms.CenterCrop(164),
    #transforms.ToTensor(),
    #transforms.Normalize(mean = [0.5,0.5,0.5],std = [0.5,0.5,0.5])
    torch.pow(0.25)
])

batch_size = 4
train_dataset = CBEDDataset('./train/batch_train_0.h5',
                            transform = data_transform)
dev_dataset = CMEDDataset('./dev/batch_dev_0.h5',
                          transform = data_transform)

train_loader = DataLoader(dataset=train_dataset,
                          batch_size=batch_size,
                          shuffle=True,
                          num_workers=32)

dev_loader = DataLoader(dataset=dev_dataset,
                        batch_size=batch_size,
                        shuffle=True,
                        num_workers=32)

class Net(torch.nn.Module):
    def __init__(self):
        """
        In the constructor we instantiate two nn.Linear module
        """
        super(Net, self).__init__()

        self.l1 = torch.nn.Linear(262144, 200000)
        self.l2 = torch.nn.Linear(200000, 160000)
        self.l3 = torch.nn.Linear(160000, 100000)
        self.l4 = torch.nn.Linear(100000, 50000)
        self.l5 = torch.nn.Linear(50000, 10000)
        self.l6 = torch.nn.Linear(10000, 5000)
        self.l7 = torch.nn.Linear(5000, 1000)

    def forward(self, x):
        x = x.view(-1, 262144)
        x = F.relu(self.l1(x))
        x = F.relu(self.l2(x))
        x = F.relu(self.l3(x))
        x = F.relu(self.l4(x))
        x = F.relu(self.l5(x))
        x = F.relu(self.l6(x))

        return self.l7(x)

model = Net()

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.3)

def train(epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = Variable(data), Variable(target)
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % 10 == 9:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.data[0]))

def dev():
    model.eval()
    dev_loss = 0
    correct = 0
    for data, target in dev_loader:
        data, target = Variable(data, volatile=True), Variable(target)
        output = model(data)
        # sum up batch loss
        dev_loss += criterion(output, target).data[0]
        # get the index of the max
        pred = output.data.max(1, keepdim=True)[1]
        correct += pred.eq(target.data.view_as(pred)).cpu().sum()

    dev_loss /= len(dev_loader.dataset)
    print('\nDev set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        dev_loss, correct, len(dev_loader.dataset),
        100. * correct / len(dev_loader.dataset)))

for epoch in range(1, 10):
    train(epoch)
    dev()

#test()
